#include "i2cp/crypto.hpp"
#include <cryptopp/sha.h>
#include <cryptopp/osrng.h>
#include <cryptopp/integer.h>

namespace i2cp
{
    namespace crypto {
        // begin copy paste from i2pd
        
        const uint8_t elgp_[256]=
        {
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC9, 0x0F, 0xDA, 0xA2, 0x21, 0x68, 0xC2, 0x34, 
            0xC4, 0xC6, 0x62, 0x8B, 0x80, 0xDC, 0x1C, 0xD1, 0x29, 0x02, 0x4E, 0x08, 0x8A, 0x67, 0xCC, 0x74, 
            0x02, 0x0B, 0xBE, 0xA6, 0x3B, 0x13, 0x9B, 0x22, 0x51, 0x4A, 0x08, 0x79, 0x8E, 0x34, 0x04, 0xDD,
            0xEF, 0x95, 0x19, 0xB3, 0xCD, 0x3A, 0x43, 0x1B, 0x30, 0x2B, 0x0A, 0x6D, 0xF2, 0x5F, 0x14, 0x37,
            0x4F, 0xE1, 0x35, 0x6D, 0x6D, 0x51, 0xC2, 0x45, 0xE4, 0x85, 0xB5, 0x76, 0x62, 0x5E, 0x7E, 0xC6,
            0xF4, 0x4C, 0x42, 0xE9, 0xA6, 0x37, 0xED, 0x6B, 0x0B, 0xFF, 0x5C, 0xB6, 0xF4, 0x06, 0xB7, 0xED,
            0xEE, 0x38, 0x6B, 0xFB, 0x5A, 0x89, 0x9F, 0xA5, 0xAE, 0x9F, 0x24, 0x11, 0x7C, 0x4B, 0x1F, 0xE6,
            0x49, 0x28, 0x66, 0x51, 0xEC, 0xE4, 0x5B, 0x3D, 0xC2, 0x00, 0x7C, 0xB8, 0xA1, 0x63, 0xBF, 0x05, 
            0x98, 0xDA, 0x48, 0x36, 0x1C, 0x55, 0xD3, 0x9A, 0x69, 0x16, 0x3F, 0xA8, 0xFD, 0x24, 0xCF, 0x5F,
            0x83, 0x65, 0x5D, 0x23, 0xDC, 0xA3, 0xAD, 0x96, 0x1C, 0x62, 0xF3, 0x56, 0x20, 0x85, 0x52, 0xBB,
            0x9E, 0xD5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6D, 0x67, 0x0C, 0x35, 0x4E, 0x4A, 0xBC, 0x98, 0x04, 
            0xF1, 0x74, 0x6C, 0x08, 0xCA, 0x18, 0x21, 0x7C, 0x32, 0x90, 0x5E, 0x46, 0x2E, 0x36, 0xCE, 0x3B,
            0xE3, 0x9E, 0x77, 0x2C, 0x18, 0x0E, 0x86, 0x03, 0x9B, 0x27, 0x83, 0xA2, 0xEC, 0x07, 0xA2, 0x8F,
            0xB5, 0xC5, 0x5D, 0xF0, 0x6F, 0x4C, 0x52, 0xC9, 0xDE, 0x2B, 0xCB, 0xF6, 0x95, 0x58, 0x17, 0x18,
            0x39, 0x95, 0x49, 0x7C, 0xEA, 0x95, 0x6A, 0xE5, 0x15, 0xD2, 0x26, 0x18, 0x98, 0xFA, 0x05, 0x10,
            0x15, 0x72, 0x8E, 0x5A, 0x8A, 0xAC, 0xAA, 0x68, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
        };
        
        const CryptoPP::Integer elgp (elgp_, 256);
        const CryptoPP::Integer elgg (2); 
        
        const uint8_t dsap_[128]=
        {
            0x9c, 0x05, 0xb2, 0xaa, 0x96, 0x0d, 0x9b, 0x97, 0xb8, 0x93, 0x19, 0x63, 0xc9, 0xcc, 0x9e, 0x8c,
            0x30, 0x26, 0xe9, 0xb8, 0xed, 0x92, 0xfa, 0xd0, 0xa6, 0x9c, 0xc8, 0x86, 0xd5, 0xbf, 0x80, 0x15,
            0xfc, 0xad, 0xae, 0x31, 0xa0, 0xad, 0x18, 0xfa, 0xb3, 0xf0, 0x1b, 0x00, 0xa3, 0x58, 0xde, 0x23,
            0x76, 0x55, 0xc4, 0x96, 0x4a, 0xfa, 0xa2, 0xb3, 0x37, 0xe9, 0x6a, 0xd3, 0x16, 0xb9, 0xfb, 0x1c,
            0xc5, 0x64, 0xb5, 0xae, 0xc5, 0xb6, 0x9a, 0x9f, 0xf6, 0xc3, 0xe4, 0x54, 0x87, 0x07, 0xfe, 0xf8,
            0x50, 0x3d, 0x91, 0xdd, 0x86, 0x02, 0xe8, 0x67, 0xe6, 0xd3, 0x5d, 0x22, 0x35, 0xc1, 0x86, 0x9c,
            0xe2, 0x47, 0x9c, 0x3b, 0x9d, 0x54, 0x01, 0xde, 0x04, 0xe0, 0x72, 0x7f, 0xb3, 0x3d, 0x65, 0x11, 
            0x28, 0x5d, 0x4c, 0xf2, 0x95, 0x38, 0xd9, 0xe3, 0xb6, 0x05, 0x1f, 0x5b, 0x22, 0xcc, 0x1c, 0x93
        };
        
        const uint8_t dsaq_[20]=
        {
            0xa5, 0xdf, 0xc2, 0x8f, 0xef, 0x4c, 0xa1, 0xe2, 0x86, 0x74, 0x4c, 0xd8, 0xee, 0xd9, 0xd2, 0x9d,
            0x68, 0x40, 0x46, 0xb7
        };
        
        const uint8_t dsag_[128]=
        {
            0x0c, 0x1f, 0x4d, 0x27, 0xd4, 0x00, 0x93, 0xb4, 0x29, 0xe9, 0x62, 0xd7, 0x22, 0x38, 0x24, 0xe0,
            0xbb, 0xc4, 0x7e, 0x7c, 0x83, 0x2a, 0x39, 0x23, 0x6f, 0xc6, 0x83, 0xaf, 0x84, 0x88, 0x95, 0x81,
            0x07, 0x5f, 0xf9, 0x08, 0x2e, 0xd3, 0x23, 0x53, 0xd4, 0x37, 0x4d, 0x73, 0x01, 0xcd, 0xa1, 0xd2,
            0x3c, 0x43, 0x1f, 0x46, 0x98, 0x59, 0x9d, 0xda, 0x02, 0x45, 0x18, 0x24, 0xff, 0x36, 0x97, 0x52,
            0x59, 0x36, 0x47, 0xcc, 0x3d, 0xdc, 0x19, 0x7d, 0xe9, 0x85, 0xe4, 0x3d, 0x13, 0x6c, 0xdc, 0xfc,
            0x6b, 0xd5, 0x40, 0x9c, 0xd2, 0xf4, 0x50, 0x82, 0x11, 0x42, 0xa5, 0xe6, 0xf8, 0xeb, 0x1c, 0x3a,
            0xb5, 0xd0, 0x48, 0x4b, 0x81, 0x29, 0xfc, 0xf1, 0x7b, 0xce, 0x4f, 0x7f, 0x33, 0x32, 0x1c, 0x3c, 
            0xb3, 0xdb, 0xb1, 0x4a, 0x90, 0x5e, 0x7b, 0x2b, 0x3e, 0x93, 0xbe, 0x47, 0x08, 0xcb, 0xcc, 0x82  
        };
        
        const CryptoPP::Integer dsap (dsap_, 128); 
        const CryptoPP::Integer dsaq (dsaq_, 20);
        const CryptoPP::Integer dsag (dsag_, 128);
        
        // end copy paste from i2pd
        
        // begin more copy paste from i2pd


	class ElGamalEncryption
	{
        public:
            
            ElGamalEncryption (const uint8_t * key):
                y (key, 256), k (rnd, CryptoPP::Integer::One(), elgp-1),
                a (a_exp_b_mod_c (elgg, k, elgp)), b1 (a_exp_b_mod_c (y, k, elgp))
                {
                }
            
            void Encrypt (const uint8_t * data, int len, uint8_t * encrypted, bool zeroPadding = false) {
                // calculate b = b1*m mod p
                uint8_t m[255];
                m[0] = 0xFF;
                memcpy (m+33, data, len);
                CryptoPP::SHA256().CalculateDigest(m+1, m+33, 222);
                CryptoPP::Integer b (a_times_b_mod_c (b1, CryptoPP::Integer (m, 255), elgp));
                
                // copy a and b
                if (zeroPadding)
                {
                    encrypted[0] = 0;
                    a.Encode (encrypted + 1, 256);
                    encrypted[257] = 0;
                    b.Encode (encrypted + 258, 256);
                }	
                else
                {
                    a.Encode (encrypted, 256);	
                    b.Encode (encrypted + 256, 256);
                }	
            }
            
        private:
            
            CryptoPP::AutoSeededRandomPool rnd;	
            CryptoPP::Integer y, k, a, b1;	
            bool m_ZeroPadding;	
	};
        
	inline bool ElGamalDecrypt (const uint8_t * key, const uint8_t * encrypted, 
                                    uint8_t * data, bool zeroPadding = false)
	{
            CryptoPP::Integer x(key, 256), a(zeroPadding? encrypted +1 : encrypted, 256), 
                b(zeroPadding? encrypted + 258 :encrypted + 256, 256);
            uint8_t m[255], hash[32];
            a_times_b_mod_c (b, a_exp_b_mod_c (a, elgp - x - 1, elgp), elgp).Encode (m, 255);
            CryptoPP::SHA256().CalculateDigest(hash, m+33, 222);
            for (int i = 0; i < 32; i++)
                if (hash[i] != m[i+1])
                {
                    return false;
                }
            memcpy (data, m + 33, 222);
            return true;
	}	
        
        // end more copy paste from i2pd
        
        

        EGLKeyPair_ptr EGL_GENERATE()
        {
            return nullptr;
        }

        bool EGL_DECRYPT(PublicEncryptionKey & pubkey, buffer_t & data, buffer_t & result) 
        {
            return false;
        }

        buffer_t EGL_ENCRYPT(PrivateEncryptionKey & privkey, buffer_t & data) 
        {
            return buffer_t();
        }

        
        DSAKeyPair_ptr DSA_GENERATE() 
        {
            PublicSigningKey pubkey;
            PrivateSigningKey privkey;
            CryptoPP::AutoSeededRandomPool prng;
            CryptoPP::DSA::PublicKey _pubkey;
            CryptoPP::DSA::PrivateKey _privkey;
            _privkey.Initialize(prng, dsap, dsaq, dsag);
            _privkey.MakePublicKey(_pubkey);
            _privkey.GetPrivateExponent().Encode(privkey.data(), 20);
            _pubkey.GetPublicElement().Encode(pubkey.data(), 128);
            return std::make_shared<DSAKeyPair>(pubkey, privkey);
        }
        
        DSA_Signature_t DSA_SHA1_SIGN(PrivateSigningKey & privkey, i2cp::buffer_t & data)
        {
            DSA_Signature_t sig;
            CryptoPP::AutoSeededRandomPool prng;
            CryptoPP::DSA::PrivateKey _privkey;
            _privkey.Initialize(dsap, dsaq, dsag, CryptoPP::Integer(privkey.data(), 20));
            CryptoPP::DSA::Signer signer (_privkey);
            signer.SignMessage(prng, data.data(), data.size(), sig.data());
            return sig;
        }
        
        bool DSA_SHA1_VERIFY(PublicSigningKey & pubkey, i2cp::buffer_t & data, DSA_Signature_t & sig)
        {
            CryptoPP::DSA::PublicKey _pubkey;
            _pubkey.Initialize(dsap, dsaq, dsag, CryptoPP::Integer(pubkey.data(), 128));
            CryptoPP::DSA::Verifier verify(_pubkey);
            return verify.VerifyMessage(data.data(), data.size(), sig.data(), sig.size());
        }
        
        
        SHA1_Digest_t SHA1(i2cp::buffer_t & data)
        {
            SHA1_Digest_t result;
            CryptoPP::SHA1().CalculateDigest(result.data(), data.data(), data.size());
            return result;
        }       

        SHA256_Digest_t SHA256(i2cp::buffer_t & data)
        {
            SHA256_Digest_t result;
            CryptoPP::SHA256().CalculateDigest(result.data(), data.data(), data.size());
            return result;
        }

        void RANDOMIZE(i2cp::buffer_t & buff)
        {
            CryptoPP::AutoSeededRandomPool prng;
            prng.GenerateBlock(buff.data(), buff.size());
        }

        i2cp::buffer_t RANDOM(size_t len)
        {
            i2cp::buffer_t buff(len);
            RANDOMIZE(buff);
            return buff;
        }
    }
}
